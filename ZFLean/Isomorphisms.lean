import ZFLean.Functions

namespace ZFSet

section Isomorphisms

def isIso (A B : ZFSet) : Prop :=
  ‚àÉ (bij : ZFSet) (is_func : A.IsFunc B bij), bij.IsBijective is_func
infix:40 " ‚âÖ·∂ª " => ZFSet.isIso

theorem isIso_refl : Reflexive ZFSet.isIso :=
  fun A ‚Ü¶ ‚ü®A.Id, Id.IsFunc, Id.IsBijective‚ü©

instance : Trans ZFSet.isIso ZFSet.isIso ZFSet.isIso where
  trans := by
    intro x y z x_iso_y y_iso_z
    obtain ‚ü®bij, is_func, is_bij‚ü© := x_iso_y
    obtain ‚ü®bij', is_func', is_bij'‚ü© := y_iso_z
    set bij'' := ZFSet.composition bij' bij x y z
    exists bij'', ZFSet.IsFunc_of_composition_IsFunc is_func' is_func
    exact ZFSet.IsBijective.composition_of_bijective is_bij is_bij'

theorem isIso_symm : Symmetric ZFSet.isIso := by
  intro x y iso
  obtain ‚ü®bij, is_func, is_bij‚ü© := iso
  have := is_func.1
  use bij‚Åª¬π, ?_
  exact inv_bijective_of_bijective is_bij
instance : IsSymm ZFSet isIso where
  symm := isIso_symm

theorem isIso_trans : Transitive ZFSet.isIso := by
  intro x y z x_iso_y y_iso_z
  obtain ‚ü®bij, is_func, is_bij‚ü© := x_iso_y
  obtain ‚ü®bij', is_func', is_bij'‚ü© := y_iso_z
  set bij'' := ZFSet.composition bij' bij x y z
  exists bij'', ZFSet.IsFunc_of_composition_IsFunc is_func' is_func
  exact ZFSet.IsBijective.composition_of_bijective is_bij is_bij'
instance : IsTrans ZFSet isIso where
  trans := isIso_trans

theorem isIso_equiv : Equivalence ZFSet.isIso where
  refl := isIso_refl
  symm := @isIso_symm
  trans := @isIso_trans
instance : IsEquiv ZFSet isIso where
  refl := isIso_refl

section Lemmas

private def C (A B u : ZFSet) : ‚Ñï ‚Üí ZFSet
  | 0 => A \ B
  | n + 1 => B.sep fun y ‚Ü¶ ‚àÉ x ‚àà C A B u n, x.pair y ‚àà u

open Classical in
theorem bijective_of_injective_on_subset {A B : ZFSet}
  (B_sub : B ‚äÜ A) {u : ZFSet} {hu : A.IsFunc B u} (u_inj : IsInjective u) :
    ‚àÉ (v : ZFSet) (hv : A.IsFunc B v), IsBijective v := by
  let C‚ÇÄ := A \ B

  have C_sub {n} : C A B u n ‚äÜ A := by
    induction n with
    | zero =>
      intro x x_mem_C
      rw [C, mem_diff] at x_mem_C
      exact x_mem_C.1
    | succ n ih =>
      intro x x_mem_C
      rw [C, mem_sep] at x_mem_C
      exact B_sub x_mem_C.1

  let v := Œª·∂ª : A ‚Üí B
              | x ‚Ü¶ if mem_Cn : ‚àÉ n, x ‚àà C A B u n then @·∂ªu ‚ü®x, by
                      rw [is_func_dom_eq hu]
                      obtain ‚ü®_, x_mem_Cn‚ü© := mem_Cn
                      apply C_sub x_mem_Cn‚ü©
                    else x

  have hv : A.IsFunc B v := by
    apply lambda_isFunc
    intro x xA
    split_ifs with mem_Cn
    ¬∑ apply fapply_mem_range
    ¬∑ push_neg at mem_Cn
      specialize mem_Cn 0
      rw [C, mem_diff, not_and, not_not] at mem_Cn
      exact mem_Cn xA
  have v_inj : IsInjective v := by
    intro x y z hx hy hz eq‚ÇÅ eq‚ÇÇ
    rw [lambda_spec] at eq‚ÇÅ eq‚ÇÇ
    split_ifs at eq‚ÇÅ eq‚ÇÇ with mem_x mem_y mem_y <;> (
      obtain ‚ü®-, -, rfl‚ü© := eq‚ÇÅ
      obtain ‚ü®-, -, eq‚ü© := eq‚ÇÇ)
    ¬∑ generalize_proofs u_pfun x_dom y_dom at eq
      rw [SetLike.coe_eq_coe] at eq
      obtain ‚ü®‚ü© := IsInjective.apply_inj hu u_inj eq
      rfl
    ¬∑ generalize_proofs u_pfun u_rel x_dom at eq
      subst y
      obtain ‚ü®n, mem_x‚ü© := mem_x
      push_neg at mem_y
      specialize mem_y (n+1)
      rw [C, mem_sep, not_and] at mem_y
      specialize mem_y hz
      push_neg at mem_y
      specialize mem_y x mem_x
      nomatch mem_y <| fapply.def u_pfun x_dom
    ¬∑ generalize_proofs u_pfun u_rel y_dom at eq
      subst z
      obtain ‚ü®n, mem_y‚ü© := mem_y
      push_neg at mem_x
      specialize mem_x (n+1)
      rw [C, mem_sep, not_and] at mem_x
      specialize mem_x hz
      push_neg at mem_x
      specialize mem_x y mem_y
      nomatch mem_x <| fapply.def u_pfun y_dom
    ¬∑ exact eq

  have v_surj : IsSurjective v := by classical
    intro y yB
    by_cases y_mem_C : ‚àÉ n, y ‚àà C A B u n
    ¬∑ obtain ‚ü®n, y_mem_Cn‚ü© := y_mem_C
      have : n ‚â† 0 := by
        rintro rfl
        rw [C, mem_diff] at y_mem_Cn
        nomatch y_mem_Cn.2 yB
      obtain ‚ü®n, rfl‚ü© := Nat.exists_eq_succ_of_ne_zero this
      rw [C, mem_sep] at y_mem_Cn
      obtain ‚ü®-, x, x_mem_Cn, x_y_u‚ü© := y_mem_Cn
      use x, C_sub x_mem_Cn
      rw [lambda_spec]
      and_intros
      ¬∑ exact C_sub x_mem_Cn
      ¬∑ exact yB
      ¬∑ rw [dite_cond_eq_true <| eq_true ‚ü®n, x_mem_Cn‚ü©,
          fapply.of_pair (is_func_is_pfunc hu) x_y_u]
    ¬∑ use y, B_sub yB
      rw [lambda_spec]
      and_intros
      ¬∑ exact B_sub yB
      ¬∑ exact yB
      ¬∑ rw [dite_cond_eq_false <| eq_false y_mem_C]
  use v, hv, v_inj, v_surj

set_option pp.proofs true in
/--
Cantor‚ÄìBernstein theorem: if there are injective functions
`f : A ‚Üí B` and `g : B ‚Üí A`, then `A` and `B` are isomorphic.
-/
theorem isIso_of_biembedding {E F f g : ZFSet} {hf : E.IsFunc F f}
  (f_inj : IsInjective f) {hg : F.IsFunc E g} (g_inj : IsInjective g hg) : E ‚âÖ·∂ª F := by
  let B := g.Range
  have B_sub : B ‚äÜ E := sep_subset_self
  let u := composition g f E F B
  have hu : E.IsFunc B u := ZFSet.IsFunc_of_composition_IsFunc (IsFunc.is_func_on_range hg) hf
  have u_inj : IsInjective u := by
    intro x y z hx hy hz eq‚ÇÅ eq‚ÇÇ
    unfold u at eq‚ÇÅ eq‚ÇÇ
    simp only [composition, mem_sep, mem_prod, pair_inj, exists_eq_right_right', existsAndEq,
      and_true, exists_eq_left'] at eq‚ÇÅ eq‚ÇÇ
    obtain ‚ü®-, x', hx', x_x'_f, x'_z_g‚ü© := eq‚ÇÅ
    obtain ‚ü®-, y', hy', y_y'_f, y'_z_g‚ü© := eq‚ÇÇ
    obtain rfl := g_inj x' y' z hx' hy' (B_sub hz) x'_z_g y'_z_g
    exact f_inj x y x' hx hy hx' x_x'_f y_y'_f
  obtain ‚ü®v, hv, bij‚ü© := bijective_of_injective_on_subset B_sub u_inj

  have hg' : F.IsFunc B g := IsFunc.is_func_on_range hg
  have g_bij : IsBijective g hg' := bijective_of_injective hg g_inj
  have h_v_hinv : E.IsFunc F (composition (inv g hg'.1) v E B F) :=
    IsFunc_of_composition_IsFunc (inv_is_func_of_bijective g_bij) hv

  use composition (inv g hg'.1) v E B F, h_v_hinv

  exact IsBijective.composition_of_bijective bij (inv_bijective_of_bijective g_bij)

alias schroeder_bernstein := isIso_of_biembedding

theorem isIso_of_prod {A B C D : ZFSet} (h : A ‚âÖ·∂ª C) (h' : B ‚âÖ·∂ª D) : A.prod B ‚âÖ·∂ª C.prod D := by
  obtain ‚ü®f‚ÇÅ, hf‚ÇÅ, bij‚ÇÅ‚ü© := h
  obtain ‚ü®f‚ÇÇ, hf‚ÇÇ, bij‚ÇÇ‚ü© := h'
  let F := (A.prod B).prod (C.prod D) |>.sep fun z ‚Ü¶
    ‚àÉ (a b c d : ZFSet), z = (a.pair b).pair (c.pair d) ‚àß (a.pair c ‚àà f‚ÇÅ) ‚àß (b.pair d ‚àà f‚ÇÇ)
  use F, ?_
  ¬∑ and_intros
    ¬∑ intro ab a'b' cd hab ha'b' hcd habcd ha'b'cd
      simp only [mem_sep, mem_prod, pair_inj, exists_eq_right_right', F] at habcd ha'b'cd
      obtain ‚ü®‚ü®‚ü®a, ha, b, hb, rfl‚ü©, c, hc, d, hd, rfl‚ü©, _, _, _, _, ‚ü®ab_eq, cd_eq‚ü©, ac_f‚ÇÅ, bd_f‚ÇÇ‚ü© :=
        habcd
      rw [pair_inj] at ab_eq cd_eq
      rcases ab_eq with ‚ü®rfl, rfl‚ü©
      rcases cd_eq with ‚ü®rfl, rfl‚ü©

      obtain ‚ü®‚ü®‚ü®a', ha', b', hb', rfl‚ü©, -‚ü©, _, _, _, _, ‚ü®a'b'_eq, cd_eq‚ü©, a'c_f‚ÇÅ, b'd_f‚ÇÇ‚ü© := ha'b'cd
      rw [pair_inj] at a'b'_eq cd_eq
      rcases a'b'_eq with ‚ü®rfl, rfl‚ü©
      rcases cd_eq with ‚ü®rfl, rfl‚ü©
      congr
      ¬∑ exact bij‚ÇÅ.1 _ _ _ ha ha' hc ac_f‚ÇÅ a'c_f‚ÇÅ
      ¬∑ exact bij‚ÇÇ.1 _ _ _ hb hb' hd bd_f‚ÇÇ b'd_f‚ÇÇ
    ¬∑ intro cd hcd
      rw [mem_prod] at hcd
      obtain ‚ü®c, hc, d, hd, rfl‚ü© := hcd
      obtain ‚ü®a, ha, ac_f‚ÇÅ‚ü© := bij‚ÇÅ.2 c hc
      obtain ‚ü®b, hb, bd_f‚ÇÇ‚ü© := bij‚ÇÇ.2 d hd
      use a.pair b
      and_intros
      ¬∑ rw [pair_mem_prod]
        exact ‚ü®ha, hb‚ü©
      ¬∑ simp only [mem_sep, mem_prod, pair_inj, exists_eq_right_right', existsAndEq, and_true,
        exists_eq_left', F]
        and_intros
        ¬∑ exact ha
        ¬∑ exact hb
        ¬∑ exact hc
        ¬∑ exact hd
        ¬∑ exact ac_f‚ÇÅ
        ¬∑ exact bd_f‚ÇÇ
  ¬∑ and_intros
    ¬∑ intro z hz
      rw [mem_sep] at hz
      exact hz.1
    ¬∑ intro z hz
      rw [mem_prod] at hz
      obtain ‚ü®a, ha, b, hb, rfl‚ü© := hz
      obtain ‚ü®c, hc, c_unq‚ü© := hf‚ÇÅ.2 a ha
      obtain ‚ü®d, hd, d_unq‚ü© := hf‚ÇÇ.2 b hb
      use c.pair d
      and_intros <;> beta_reduce
      ¬∑ rw [mem_sep, pair_mem_prod, pair_mem_prod, pair_mem_prod]
        and_intros
        ¬∑ exact ha
        ¬∑ exact hb
        ¬∑ exact hf‚ÇÅ.1 hc |> pair_mem_prod.mp |>.2
        ¬∑ exact hf‚ÇÇ.1 hd |> pair_mem_prod.mp |>.2
        ¬∑ use a, b, c, d
      ¬∑ intro y hy
        rw [mem_sep, pair_mem_prod] at hy
        obtain ‚ü®c', hc', d', hd', rfl‚ü© := hy.1.2 |> mem_prod.mp
        simp only [mem_prod, pair_inj, exists_eq_right_right', existsAndEq, and_true,
          exists_eq_left'] at hy
        congr
        ¬∑ apply c_unq
          exact hy.2.1
        ¬∑ apply d_unq
          exact hy.2.2

theorem inv_Image_of_bijective {f A B : ZFSet} {hf : A.IsFunc B f}
  (bij : f.IsBijective) {X : ZFSet} (hX : X ‚äÜ A) :
    f‚Åª¬π[(f[X])] = X := by
  ext1 x
  constructor <;> intro hx
  ¬∑ simp [mem_Image, mem_inv] at hx
    obtain ‚ü®xA, y, ‚ü®yB, u, uX, fuy‚ü©, fxy‚ü© := hx
    obtain rfl := bij.1 u x y (hf.1 fuy |> pair_mem_prod.mp |>.1) xA yB fuy fxy
    exact uX
  ¬∑ simp [mem_Image, mem_inv]
    and_intros
    ¬∑ exact hX hx
    ¬∑ obtain ‚ü®y, yB, -‚ü© := hf.2 x (hX hx)
      use y
      and_intros
      ¬∑ exact hf.1 yB |> pair_mem_prod.mp |>.2
      ¬∑ use x
      ¬∑ exact yB

theorem Image_inv_of_bijective {f A B : ZFSet} {hf : A.IsFunc B f}
  (bij : f.IsBijective hf) {X : ZFSet} (hX : X ‚äÜ B) :
    f[(f‚Åª¬π[X])] = X := by
  let g := f‚Åª¬π
  have hg : B.IsFunc A g := inv_is_func_of_bijective bij
  have gbij : g.IsBijective hg := inv_bijective_of_bijective bij
  have ginv_eq : g‚Åª¬π = f := by rw [inv_involutive]
  have := inv_Image_of_bijective gbij hX
  dsimp [g] at this
  conv at this =>
    enter [1,1]
    rw [inv_involutive]
  exact this

theorem IsInjective_of_left_inverse {A B : ZFSet} {f : ZFSet}
  (hf : A.IsFunc B f) {g : ZFSet} (hg : B.IsFunc A g) (left_inv : g ‚àò·∂ª f = ùüôA) :
    IsInjective f := by
  intro x y z hx hy hz fxy fxz
  have x_x : x.pair x ‚àà g ‚àò·∂ª f := by
    rw [left_inv]
    exact pair_self_mem_Id hx
  have y_y : y.pair y ‚àà g ‚àò·∂ª f := by
    rw [left_inv]
    exact pair_self_mem_Id hy

  simp only [composition, mem_sep, mem_prod, pair_inj, exists_eq_right_right', and_self,
    existsAndEq, and_true, exists_eq_left'] at x_x y_y
  obtain ‚ü®-, x', hx', x_x'_f, x'_x_g‚ü© := x_x
  obtain ‚ü®-, y', hy', y_y'_f, y'_y_g‚ü© := y_y

  obtain rfl : x' = y' := by
    trans z
    ¬∑ apply hf.2 x hx |>.unique
      ¬∑ exact x_x'_f
      ¬∑ exact fxy
    ¬∑ apply hf.2 y hy |>.unique
      ¬∑ exact fxz
      ¬∑ exact y_y'_f
  apply hg.2 x' hx' |>.unique
  ¬∑ exact x'_x_g
  ¬∑ exact y'_y_g

theorem IsSurjective_of_right_inverse {A B : ZFSet} {f : ZFSet}
  (hf : A.IsFunc B f) {g : ZFSet} (hg : B.IsFunc A g) (right_inv : f ‚àò·∂ª g = ùüôB) :
    IsSurjective f := by
  intro y yB
  have y_y : y.pair y ‚àà f ‚àò·∂ª g := by
    rw [right_inv]
    exact pair_self_mem_Id yB
  simp only [composition, mem_sep, mem_prod, pair_inj, exists_eq_right_right', and_self,
    existsAndEq, and_true, exists_eq_left'] at y_y
  obtain ‚ü®yB, x, xA, gyx, fxy‚ü© := y_y
  use x, xA

theorem isIso_of_two_sided_inverse {A B : ZFSet} {f : ZFSet}
  {hf : A.IsFunc B f} {g : ZFSet} {hg : B.IsFunc A g}
  (left_inv : g ‚àò·∂ª f = ùüôA) (right_inv : f ‚àò·∂ª g = ùüôB) :
    A ‚âÖ·∂ª B := by
  use f, hf
  and_intros
  ¬∑ exact IsInjective_of_left_inverse _ _ left_inv
  ¬∑ exact IsSurjective_of_right_inverse _ _ right_inv

theorem isIso_powerset {A B : ZFSet} (h : A ‚âÖ·∂ª B) : A.powerset ‚âÖ·∂ª B.powerset := by
  obtain ‚ü®f, hf, bij‚ü© := h
  let F := Œª·∂ª : A.powerset ‚Üí B.powerset | x ‚Ü¶ f[x]
  have hF : A.powerset.IsFunc B.powerset F := by
    apply lambda_isFunc
    intros
    rw [mem_powerset]
    intro y yIm
    rw [mem_Image] at yIm
    exact yIm.1
  let F' := Œª·∂ª : B.powerset ‚Üí A.powerset | z ‚Ü¶ f‚Åª¬π[z]
  have hF' : B.powerset.IsFunc A.powerset F' := by
    apply lambda_isFunc
    intros
    rw [mem_powerset]
    intro y yIm
    rw [mem_Image] at yIm
    exact yIm.1
  have left_inv : F' ‚àò·∂ª F = ùüôA.powerset := by
    ext1 X
    rw [fcomp, composition, mem_sep, mem_prod]
    constructor
    ¬∑ rintro ‚ü®‚ü®X, hX, Y, hY, rfl‚ü©, ‚ü®_, _, eq, Z, hZ, FXZ, F'ZY‚ü©‚ü©
      rw [pair_inj] at eq
      obtain ‚ü®rfl, rfl‚ü© := eq
      rw [mem_lambda] at FXZ F'ZY
      simp only [pair_inj, mem_powerset, existsAndEq, and_true, exists_eq_left'] at FXZ F'ZY
      obtain ‚ü®-, -, rfl‚ü© := FXZ
      obtain ‚ü®-, -, rfl‚ü© := F'ZY
      rw [inv_Image_of_bijective bij (mem_powerset.mp hX), pair_mem_Id_iff hX]
    ¬∑ intro hX
      rw [mem_Id_iff] at hX
      obtain ‚ü®X, hX, rfl‚ü© := hX
      simp only [mem_powerset, pair_inj, exists_eq_right_right', and_self, existsAndEq,
        and_true, exists_eq_left']
      apply And.intro <| mem_powerset.mp hX
      use f[X]
      and_intros
      ¬∑ intro z hz
        rw [mem_Image] at hz
        exact hz.1
      ¬∑ rw [lambda_spec]
        and_intros
        ¬∑ exact hX
        ¬∑ rw [mem_powerset]
          intro y hy
          rw [mem_Image] at hy
          exact hy.1
        ¬∑ rfl
      ¬∑ rw [lambda_spec]
        and_intros
        ¬∑ rw [mem_powerset]
          intro y hy
          rw [mem_Image] at hy
          exact hy.1
        ¬∑ exact hX
        ¬∑ rw [inv_Image_of_bijective bij (mem_powerset.mp hX)]

  have right_inv : F ‚àò·∂ª F' = ùüôB.powerset := by
    ext1 X
    rw [fcomp, composition, mem_sep, mem_prod]
    constructor
    ¬∑ rintro ‚ü®‚ü®X, hX, Y, hY, rfl‚ü©, ‚ü®_, _, eq, Z, hZ, FXZ, F'ZY‚ü©‚ü©
      rw [pair_inj] at eq
      obtain ‚ü®rfl, rfl‚ü© := eq
      rw [mem_lambda] at FXZ F'ZY
      simp only [pair_inj, mem_powerset, existsAndEq, and_true, exists_eq_left'] at FXZ F'ZY
      obtain ‚ü®-, -, rfl‚ü© := FXZ
      obtain ‚ü®-, -, rfl‚ü© := F'ZY
      rw [Image_inv_of_bijective bij (mem_powerset.mp hX), pair_mem_Id_iff hX]
    ¬∑ intro hX
      rw [mem_Id_iff] at hX
      obtain ‚ü®X, hX, rfl‚ü© := hX
      simp only [mem_powerset, pair_inj, exists_eq_right_right', and_self, existsAndEq,
        and_true, exists_eq_left']
      apply And.intro <| mem_powerset.mp hX
      have := subset_prod_inv hf.1
      use f‚Åª¬π[X]
      and_intros
      ¬∑ intro z hz
        rw [mem_Image] at hz
        exact hz.1
      ¬∑ rw [lambda_spec]
        and_intros
        ¬∑ exact hX
        ¬∑ rw [mem_powerset]
          intro y hy
          rw [mem_Image] at hy
          exact hy.1
        ¬∑ rfl
      ¬∑ rw [lambda_spec]
        and_intros
        ¬∑ rw [mem_powerset]
          intro y hy
          rw [mem_Image] at hy
          exact hy.1
        ¬∑ exact hX
        ¬∑ rw [Image_inv_of_bijective bij (mem_powerset.mp hX)]
  apply isIso_of_two_sided_inverse left_inv right_inv

open Classical in
theorem isIso_funs_to_pow_rel {A B : ZFSet} : A.funs B.powerset ‚âÖ·∂ª (A.prod B).powerset := by
  let F := Œª·∂ª : (A.funs B.powerset) ‚Üí (A.prod B).powerset
              |         f           ‚Ü¶ if hf : A.IsFunc B.powerset f then
                                        A.prod B |>.sep fun z ‚Ü¶
                                          if hz : z ‚àà A.prod B then
                                            have : z.œÄ‚ÇÅ ‚àà A := by
                                              rw [mem_prod] at hz
                                              obtain ‚ü®_, _, _, _, rfl‚ü© := hz
                                              rwa [œÄ‚ÇÅ_pair]
                                            z.œÄ‚ÇÇ ‚àà (@·∂ªf ‚ü®z.œÄ‚ÇÅ, by rwa [is_func_dom_eq hf]‚ü©).val
                                          else False
                                      else ‚àÖ
  let G := Œª·∂ª : (A.prod B).powerset ‚Üí (A.funs B.powerset)
              |         R           ‚Ü¶ Œª·∂ª: A ‚Üí B.powerset
                                        | a ‚Ü¶ if ha : a ‚àà A then
                                                B.sep fun b ‚Ü¶ (a.pair b ‚àà R) -- {b ‚àà B | (a, b) ‚àà R}
                                              else ‚àÖ

  have hF : (A.funs B.powerset).IsFunc (A.prod B).powerset F := by
    apply lambda_isFunc
    intro f hf
    rw [mem_funs] at hf
    rw [dite_cond_eq_true (eq_true hf)]
    apply sep_mem_powerset
    rw [mem_powerset]
  have hG : (A.prod B).powerset.IsFunc (A.funs B.powerset) G := by
    apply lambda_isFunc
    intro R hR
    rw [mem_powerset] at hR
    apply mem_funs_of_lambda
    intro a ha
    rw [dite_cond_eq_true (eq_true ha)]
    apply sep_mem_powerset
    rw [mem_powerset]

  apply isIso_of_two_sided_inverse (f := F) (g := G)
  ¬∑ ext1 f
    simp only [mem_composition, mem_funs, mem_powerset, mem_Id_iff]
    constructor
    ¬∑ rintro ‚ü®f, R, g, rfl, hf, hg, hR, fR_F, Rg_G‚ü©
      use f, hf
      rw [pair_inj, eq_self, true_and]
      rw [lambda_spec] at fR_F Rg_G
      obtain ‚ü®_, _, rfl‚ü© := fR_F
      obtain ‚ü®_, _, rfl‚ü© := Rg_G
      rw [dite_cond_eq_true (eq_true hf)]
      conv_rhs => rw [lambda_eta hf]
      rw [lambda_ext_iff ?_]
      ¬∑ intro a ha
        rw [dite_cond_eq_true (eq_true ha), dite_cond_eq_true (eq_true ha)]
        ext1 X
        simp only [mem_prod, dite_else_false, mem_sep, pair_inj, exists_eq_right_right', œÄ‚ÇÅ_pair,
          œÄ‚ÇÇ_pair, and_exists_self]
        constructor
        ¬∑ rintro ‚ü®_, _, hX‚ü©
          exact hX
        ¬∑ intro hX
          obtain ‚ü®Y, Y_def, X_unq‚ü© := hf.2 a ha
          have YB := hf.1 Y_def |> pair_mem_prod.mp |>.2
          rw [Image_of_singleton_pair_mem_iff hf] at Y_def
          simp_rw [fapply_eq_Image_singleton hf ha, Y_def, sInter_singleton] at hX ‚ä¢
          rw [mem_powerset] at YB
          and_intros
          ¬∑ exact YB hX
          ¬∑ exact ‚ü®‚ü®ha, YB hX‚ü©, hX‚ü©
      ¬∑ intro a ha
        rw [dite_cond_eq_true (eq_true ha)]
        apply sep_mem_powerset
        rw [mem_powerset]
    ¬∑ rintro ‚ü®f, hf, rfl‚ü©
      use f, @·∂ªF ‚ü®f, by rwa [is_func_dom_eq hF, mem_funs]‚ü©, f
      ¬∑ rw [eq_self, true_and, ‚Üêand_assoc, and_self]
        and_intros
        ¬∑ exact hf.1
        ¬∑ exact hf.2
        ¬∑ rw [‚Üêmem_powerset]
          apply fapply_mem_range
        ¬∑ apply fapply.def
        ¬∑ rw [lambda_spec]
          and_intros
          ¬∑ apply fapply_mem_range
          ¬∑ rw [mem_funs]
            exact hf
          ¬∑ conv_lhs => rw [lambda_eta hf]
            rw [lambda_ext_iff ?_]
            ¬∑ intro a ha
              generalize_proofs _ _ ha_f_dom Fpfunc f_Fdom
              rw [fapply_lambda (ha := by rwa [mem_funs]), dite_cond_eq_true (eq_true ha),
                dite_cond_eq_true (eq_true ha),
                dite_cond_eq_true (eq_true hf)]
              ¬∑ ext1 z
                constructor
                ¬∑ intro hz
                  simp only [mem_prod, dite_else_false, mem_sep, pair_inj, exists_eq_right_right',
                    œÄ‚ÇÅ_pair, œÄ‚ÇÇ_pair, and_exists_self]
                  have zB : z ‚àà B := mem_powerset.mp (fapply_mem_range _ (ha_f_dom ha)) hz
                  exact ‚ü®zB, ‚ü®ha, zB‚ü©, hz‚ü©
                ¬∑ intro hz
                  simp only [mem_prod, dite_else_false, mem_sep, pair_inj, exists_eq_right_right',
                    œÄ‚ÇÅ_pair, œÄ‚ÇÇ_pair, and_exists_self] at hz
                  obtain ‚ü®-, _, z_mem‚ü© := hz
                  exact z_mem
              ¬∑ intro X hX
                rw [dite_cond_eq_true (eq_true <| mem_funs.mp hX)]
                apply sep_mem_powerset
                rw [mem_powerset]
            ¬∑ intro a ha
              rw [dite_cond_eq_true (eq_true ha)]
              apply fapply_mem_range
  ¬∑ ext1 R
    simp only [mem_composition, mem_powerset, mem_funs, mem_Id_iff]
    constructor
    ¬∑ rintro ‚ü®R, f, S, rfl, hR, hf, hS, Rf_G, fS_F‚ü©
      use R, hR
      rw [pair_inj, eq_self, true_and]
      rw [lambda_spec] at Rf_G fS_F
      obtain ‚ü®_, _, rfl‚ü© := Rf_G
      obtain ‚ü®_, _, rfl‚ü© := fS_F
      rw [dite_cond_eq_true (eq_true hS)]
      ext1 ab
      simp only [mem_prod, dite_eq_ite, dite_else_false, mem_sep, and_exists_self]
      constructor
      ¬∑ rintro ‚ü®‚ü®a, ha, b, hb, rfl‚ü©, b_mem‚ü©
        simp only [œÄ‚ÇÅ_pair, œÄ‚ÇÇ_pair] at b_mem
        rw [fapply_lambda] at b_mem
        ¬∑ rw [ite_cond_eq_true (h := eq_true ha), mem_sep] at b_mem
          exact b_mem.2
        ¬∑ intro x hx
          rw [ite_cond_eq_true (h := eq_true hx)]
          apply sep_mem_powerset
          rw [mem_powerset]
        ¬∑ exact ha
      ¬∑ intro hab
        obtain ‚ü®a, ha, b, hb, rfl‚ü© := hR hab |> mem_prod.mp
        simp only [œÄ‚ÇÅ_pair, œÄ‚ÇÇ_pair, pair_inj, exists_eq_right_right']
        use ‚ü®ha, hb‚ü©
        rw [fapply_lambda]
        ¬∑ rw [ite_cond_eq_true (h := eq_true ha), mem_sep]
          exact ‚ü®hb, hab‚ü©
        ¬∑ intro x hx
          rw [ite_cond_eq_true (h := eq_true hx)]
          apply sep_mem_powerset
          rw [mem_powerset]
        ¬∑ exact ha
    ¬∑ rintro ‚ü®S, hS, rfl‚ü©
      simp only [pair_inj, existsAndEq, and_true, exists_and_left, exists_eq_left', and_self_left]
      and_intros
      ¬∑ exact hS
      ¬∑ use @·∂ªG ‚ü®S, by rwa [is_func_dom_eq hG, mem_powerset]‚ü©
        and_intros
        ¬∑ exact fapply_mem_range _ _ |> mem_funs.mp |>.1
        ¬∑ intro a ha
          rw [fapply_lambda]
          ¬∑ simp only [ha, true_and, dite_true, lambda_spec, mem_powerset]
            use B.sep fun b ‚Ü¶ (a.pair b ‚àà S)
            and_intros
            ¬∑ exact sep_subset_self
            ¬∑ rfl
            ¬∑ rintro _ ‚ü®_, rfl‚ü©
              rfl
          ¬∑ intros
            apply mem_funs_of_lambda
            intro _ ha
            rw [dite_cond_eq_true (eq_true ha)]
            apply sep_mem_powerset
            rw [mem_powerset]
          ¬∑ rwa [mem_powerset]
        ¬∑ apply fapply.def
        ¬∑ rw [lambda_spec]
          and_intros
          ¬∑ apply fapply_mem_range
          ¬∑ rwa [mem_powerset]
          ¬∑ rw [dite_cond_eq_true (eq_true ?_)]
            ¬∑ ext1 ab
              simp only [mem_prod, dite_else_false, mem_sep, and_exists_self]
              generalize_proofs G_pfunc _ S_Gdom fapply_pfunc a_dom
              have fapp_eq :
                ‚Üë(@·∂ªG ‚ü®S, S_Gdom‚ü©) =
                (Œª·∂ª : A ‚Üí B.powerset
                    | a ‚Ü¶ if ha : a ‚àà A then B.sep (fun b => a.pair b ‚àà S) else ‚àÖ)
                  := by
                rw [fapply_lambda]
                ¬∑ intros
                  apply mem_funs_of_lambda
                  intro _ ha
                  rw [dite_cond_eq_true (eq_true ha)]
                  apply sep_mem_powerset
                  rw [mem_powerset]
                ¬∑ rwa [mem_powerset]
              constructor
              ¬∑ intro hab
                obtain ‚ü®a, ha, b, hb, rfl‚ü© := hS hab |> mem_prod.mp
                simp only [œÄ‚ÇÅ_pair, œÄ‚ÇÇ_pair, pair_inj, exists_eq_right_right']
                use ‚ü®ha, hb‚ü©
                rw [fapply]
                generalize_proofs choose‚ÇÅ choose‚ÇÇ
                simp [fapp_eq] at *
                clear fapp_eq
                generalize_proofs choose‚ÇÉ
                have choose‚ÇÉ_spec := choose_spec choose‚ÇÉ
                rw [lambda_spec, ite_cond_eq_true _ _ (eq_true ha)] at choose‚ÇÉ_spec
                rw [choose‚ÇÉ_spec.2.2.2, mem_sep]
                exact ‚ü®hb, hab‚ü©
              ¬∑ rintro ‚ü®‚ü®a, ha, b, hb, rfl‚ü©, h‚ü©
                simp only [œÄ‚ÇÅ_pair, œÄ‚ÇÇ_pair] at h
                simp only [fapply, mem_powerset, mem_funs] at h
                generalize_proofs choose‚ÇÅ choose‚ÇÇ at h
                have choose‚ÇÅ_spec := choose_spec choose‚ÇÅ
                have choose‚ÇÇ_spec := choose_spec choose‚ÇÇ
                have choose‚ÇÅ_eq := choose‚ÇÅ_spec.2 |> lambda_spec.mp |>.2.2

                conv at choose‚ÇÇ_spec =>
                  enter [2,1]
                  rw [choose‚ÇÅ_eq]
                rw [lambda_spec, dite_cond_eq_true (eq_true ha)] at choose‚ÇÇ_spec
                rw [choose‚ÇÇ_spec.2.2.2, mem_sep] at h
                exact h.2
            ¬∑ rw [fapply_lambda]
              ¬∑ apply lambda_isFunc
                intro a ha
                rw [dite_cond_eq_true (eq_true ha)]
                apply sep_mem_powerset
                rw [mem_powerset]
              ¬∑ intros
                apply mem_funs_of_lambda
                intro a ha
                rw [dite_cond_eq_true (eq_true ha)]
                apply sep_mem_powerset
                rw [mem_powerset]
              ¬∑ rwa [mem_powerset]

  ¬∑ exact hF
  ¬∑ exact hG

theorem isIso_of_funs {A B C D : ZFSet} (h : A ‚âÖ·∂ª C) (h' : B ‚âÖ·∂ª D) : A.funs B ‚âÖ·∂ª C.funs D := by
  classical
  obtain ‚ü®F, hF, Fbij‚ü© := h
  have : F‚Åª¬π ‚äÜ C.prod A := by apply subset_prod_inv
  obtain ‚ü®G, hG, Gbij‚ü© := h'

  let Œæ := Œª·∂ª : (A.funs B) ‚Üí (C.funs D)
              |     f      ‚Ü¶ if hf : f ‚äÜ A.prod B then
                              Œª·∂ª: C ‚Üí D
                                | c ‚Ü¶ ‚ãÇ‚ÇÄ (G[f[F‚Åª¬π[{c}]]])
                            else ‚àÖ
  use Œæ, ?_
  ¬∑ rw [bijective_exists1_iff]
    intro f hf
    rw [mem_funs] at hf
    have Ginv_isfunc := inv_is_func_of_bijective Gbij
    let g := Œª·∂ª : A ‚Üí B
                | a ‚Ü¶ if ha : a ‚àà A then ‚ãÇ‚ÇÄ (G‚Åª¬π[f[F[{a}]]]) else ‚àÖ
    have hg : A.IsFunc B g := by
      apply lambda_isFunc
      intro a ha
      rw [dite_cond_eq_true (eq_true ha),
        Image_singleton_eq_fapply hF ha,
        Image_singleton_eq_fapply hf (by apply fapply_mem_range),
        Image_singleton_eq_fapply Ginv_isfunc (by apply fapply_mem_range),
        sInter_singleton]
      apply fapply_mem_range
    use g
    and_intros
    ¬∑ apply mem_funs_of_lambda
      intro a ha
      rw [dite_cond_eq_true (eq_true ha),
        Image_singleton_eq_fapply hF ha,
        Image_singleton_eq_fapply hf (by apply fapply_mem_range),
        Image_singleton_eq_fapply Ginv_isfunc (by apply fapply_mem_range),
        sInter_singleton]
      apply fapply_mem_range
    ¬∑ rw [lambda_spec]
      and_intros
      ¬∑ rw [mem_funs]
        exact hg
      ¬∑ rw [mem_funs]
        exact hf
      ¬∑ rw [dite_cond_eq_true (eq_true hg.1), lambda_eta hf, lambda_ext_iff]
        ¬∑ intro c hc
          rw [dite_cond_eq_true (eq_true hc)]
          rw [Image_singleton_eq_fapply (inv_is_func_of_bijective Fbij) hc,
            Image_singleton_eq_fapply hg (by apply fapply_mem_range),
            Image_singleton_eq_fapply hG (by apply fapply_mem_range),
            sInter_singleton]
          conv =>
            unfold fapply
            dsimp
            rfl
          congr
          funext d
          ext
          constructor <;> (rintro ‚ü®xD, h‚ü©; refine ‚ü®xD, ?_‚ü©)
          ¬∑ generalize_proofs Frel c_Finv c_Finv_g
            have ‚ü®bB, ab_g‚ü© := Classical.choose_spec c_Finv_g
            have ‚ü®aA, ac_F‚ü© := Classical.choose_spec c_Finv
            set b := Classical.choose c_Finv_g
            set a := Classical.choose c_Finv
            rw [mem_inv] at ac_F
            rw [lambda_spec] at ab_g
            obtain ‚ü®-, -, b_eq‚ü© := ab_g
            rw [dite_cond_eq_true (eq_true aA)] at b_eq
            have Fa := fapply.of_pair (is_func_is_pfunc hF) ac_F
            have Fc := fapply.of_pair (is_func_is_pfunc hf) h
            conv at b_eq =>
              enter [2]
              rw [Image_singleton_eq_fapply hF aA, Fa, Image_singleton_eq_fapply hf hc, Fc,
                ‚Üêfapply_eq_Image_singleton Ginv_isfunc xD]
            rw [b_eq, ‚Üêmem_inv (is_rel_of_is_func hG)]
            apply fapply.def
          ¬∑ generalize_proofs Frel ac_Finv ab_g_spec at h
            have ‚ü®aA, ac_F‚ü© := Classical.choose_spec ac_Finv
            have ‚ü®bB, ab_g‚ü© := Classical.choose_spec ab_g_spec
            set b := Classical.choose ab_g_spec
            set a := Classical.choose ac_Finv
            rw [lambda_spec] at ab_g
            obtain ‚ü®-, -, b_eq‚ü© := ab_g
            rw [dite_cond_eq_true (eq_true aA)] at b_eq
            rw [mem_inv] at ac_F
            have Fa := fapply.of_pair (is_func_is_pfunc hF) ac_F
            have Gb := fapply.of_pair (is_func_is_pfunc hG) h
            conv at b_eq =>
              enter [2]
              rw [Image_singleton_eq_fapply hF aA, Fa, Image_singleton_eq_fapply hf hc,
                Image_singleton_eq_fapply Ginv_isfunc (fapply_mem_range _ _), sInter_singleton]
            simp only [b_eq, Subtype.ext_iff] at Gb
            conv at Gb =>
              enter [1,1]
              rw [‚Üêfapply_composition hG Ginv_isfunc (fapply_mem_range _ _)]
              unfold fapply
            dsimp at Gb
            generalize_proofs Grel cdf cd_GGinv at Gb
            subst d
            have ‚ü®dD, cd_G‚ü© := Classical.choose_spec cd_GGinv
            have ‚ü®d'D, cd_f‚ü© := Classical.choose_spec cdf
            set d := Classical.choose cd_GGinv
            set d' := Classical.choose cdf
            rw [composition_inv_self_of_bijective Gbij, pair_mem_Id_iff d'D] at cd_G
            rwa [‚Üêcd_G]
        ¬∑ intro c hc
          rw [dite_cond_eq_true (eq_true hc)]
          apply fapply_mem_range
    ¬∑ rintro g' ‚ü®hg', g'f_Œæ‚ü©
      rw [lambda_spec] at g'f_Œæ
      obtain ‚ü®-,-,f_eq‚ü© := g'f_Œæ
      rw [dite_cond_eq_true (eq_true (by rw [mem_funs] at hg'; exact hg'.1))] at f_eq
      subst f_eq
      rw [lambda_eta (mem_funs.mp hg'), lambda_ext_iff]
      ¬∑ intro a ha
        simp only [dite_cond_eq_true (eq_true ha)]
        rw [Image_singleton_eq_fapply hF ha,
          Image_singleton_eq_fapply hf (by apply fapply_mem_range),
          Image_singleton_eq_fapply Ginv_isfunc (by apply fapply_mem_range),
          sInter_singleton]
        conv_rhs =>
          unfold fapply
        dsimp
        generalize_proofs g'pfunc g'rel a_g'dom Grel Frel acF dclambda bdGinv
        have ‚ü®cC, ac_F‚ü© := Classical.choose_spec acF
        have ‚ü®bB, db_G‚ü© := Classical.choose_spec bdGinv
        have ‚ü®dD, dc_eq‚ü©:= Classical.choose_spec dclambda
        set! d := Classical.choose dclambda with d_def
        set! b := Classical.choose bdGinv with b_def
        set! c := Classical.choose acF with c_def
        rw [lambda_spec] at dc_eq
        obtain ‚ü®-, -, d_eq‚ü© := dc_eq
        conv_lhs at d_eq => rw [‚Üêd_def]
        rw [‚Üêmem_inv] at ac_F
        conv at ac_F =>
          conv =>
            lhs
            change inv F
          rw [‚Üêc_def]
        conv at d_eq =>
          conv =>
            enter [2,1,2]
            conv =>
              enter [2]
              rw [‚Üêc_def, Image_singleton_eq_fapply (inv_is_func_of_bijective Fbij) cC]
              simp only [‚Üêc_def, fapply.of_pair _ ac_F]
          conv =>
            enter [2]
            conv =>
              enter [1,2]
              rw [Image_singleton_eq_fapply (mem_funs.mp hg') ha]
            rw [‚Üêfapply_eq_Image_singleton hG (fapply_mem_range g'pfunc a_g'dom)]
        rw [‚Üêb_def, ‚Üêd_def] at db_G
        have b_eq := fapply.of_pair (is_func_is_pfunc Ginv_isfunc) db_G
        rw [Subtype.ext_iff] at b_eq
        simp [d_eq] at b_eq
        rw [‚Üêfapply_composition Ginv_isfunc hG (fapply_mem_range g'pfunc a_g'dom)] at b_eq
        conv at b_eq =>
          unfold fapply
          dsimp
        generalize_proofs abg' bb'GGinv at b_eq
        have ‚ü®bB', bb'‚ü© := Classical.choose_spec bb'GGinv
        have ‚ü®g'B, ab_g'‚ü© := Classical.choose_spec abg'
        set b := Classical.choose bb'GGinv
        set b' := Classical.choose abg'
        rw [composition_self_inv_of_bijective Gbij, pair_mem_Id_iff g'B] at bb'
        rw [‚Üêb_def, ‚Üêb_eq, ‚Üêbb']
        rfl
      ¬∑ intro _ h
        rw [dite_cond_eq_true (eq_true h)]
        apply fapply_mem_range
  ¬∑ and_intros
    ¬∑ exact lambda_subset
    ¬∑ intro f hf
      rw [mem_funs] at hf
      use Œª·∂ª : C ‚Üí D
             | c ‚Ü¶ ‚ãÇ‚ÇÄ (G[f[F‚Åª¬π[{c}]]])
      and_intros <;> beta_reduce
      ¬∑ rw [lambda_spec]
        and_intros
        ¬∑ rwa [mem_funs]
        ¬∑ apply mem_funs_of_lambda
          intro c hc
          obtain ‚ü®a, ha, a_def‚ü© := eq_singleton_of_bijective_inv_Image_of_singleton Fbij hc
          obtain ‚ü®b, hb, b_def‚ü© : ‚àÉ b ‚àà B, f[{a}] = {b} := by
            obtain ‚ü®b, hb, b_unq‚ü© := hf.2 a ha
            use b
            and_intros
            ¬∑ exact hf.1 hb |> pair_mem_prod.mp |>.2
            ¬∑ rwa [‚ÜêImage_of_singleton_pair_mem_iff hf]
          obtain ‚ü®d, hd, d_def‚ü© : ‚àÉ d ‚àà D, G[{b}] = {d} := by
            obtain ‚ü®d, hd, d_unq‚ü© := hG.2 b hb
            use d
            and_intros
            ¬∑ exact hG.1 hd |> pair_mem_prod.mp |>.2
            ¬∑ rwa [‚ÜêImage_of_singleton_pair_mem_iff hG]
          rwa [a_def, b_def, d_def, sInter_singleton]
        ¬∑ rw [dite_cond_eq_true (eq_true hf.1)]
      ¬∑ intro g hg
        rw [lambda_spec, dite_cond_eq_true (eq_true hf.1)] at hg
        exact hg.2.2

theorem isIso_powerset_char_pred {A : ZFSet} : A.powerset ‚âÖ·∂ª A.funs ùîπ := by
  apply isIso_symm
  let f := Œª·∂ª : (A.funs ùîπ) ‚Üí (A.powerset)
              |         fX ‚Ü¶ A.sep fun z ‚Ü¶ z.pair zftrue ‚àà fX
  use f, ?_
  ¬∑ and_intros
    ¬∑ intro fX fY Z hfX hfY hZ fX_Z fY_Z
      rw [mem_lambda] at fX_Z fY_Z
      obtain ‚ü®_, X, eq, -, _, rfl‚ü© := fX_Z
      rw [pair_inj] at eq
      obtain ‚ü®rfl, rfl‚ü© := eq
      obtain ‚ü®_, Y, eq, -, _, rfl‚ü© := fY_Z
      rw [pair_inj] at eq
      obtain ‚ü®rfl, hext‚ü© := eq
      simp only [ZFSet.ext_iff, mem_sep, and_congr_right_iff] at hext
      ext1 z
      constructor <;> intro hz
      ¬∑ obtain ‚ü®a, ha, b, hb, rfl‚ü© := (mem_funs.mp hfX).1 hz |> mem_prod.mp
        specialize hext a ha
        rw [ZFBool.mem_ùîπ_iff] at hb
        obtain rfl | rfl := hb
        ¬∑ have : a.pair zftrue ‚àâ fX := by
            intro contr
            rw [mem_funs] at hfX
            nomatch zftrue_ne_zffalse <| hfX.2 a ha |>.unique contr hz
          rw [iff_false_left this] at hext
          rw [mem_funs] at hfY
          obtain ‚ü®b', ab', _‚ü© := hfY.2 a ha
          obtain rfl | rfl := hfY.1 ab' |> pair_mem_prod.mp |>.2 |> (ZFBool.mem_ùîπ_iff b').mp
          ¬∑ exact ab'
          ¬∑ contradiction
        ¬∑ exact hext.mp hz
      ¬∑ obtain ‚ü®a, ha, b, hb, rfl‚ü© := (mem_funs.mp hfY).1 hz |> mem_prod.mp
        specialize hext a ha
        rw [ZFBool.mem_ùîπ_iff] at hb
        obtain rfl | rfl := hb
        ¬∑ have : a.pair zftrue ‚àâ fY := by
            intro contr
            rw [mem_funs] at hfY
            nomatch zftrue_ne_zffalse <| hfY.2 a ha |>.unique contr hz
          rw [iff_false_right this] at hext
          rw [mem_funs] at hfX
          obtain ‚ü®b', ab', _‚ü© := hfX.2 a ha
          obtain rfl | rfl := hfX.1 ab' |> pair_mem_prod.mp |>.2 |> (ZFBool.mem_ùîπ_iff b').mp
          ¬∑ exact ab'
          ¬∑ contradiction
        ¬∑ exact hext.mpr hz
    ¬∑ intro X hX
      rw [mem_powerset] at hX
      let fX := A.prod ùîπ |>.sep fun ab ‚Ü¶ ab.œÄ‚ÇÅ ‚àà X ‚Üî ab.œÄ‚ÇÇ = zftrue
      use fX
      have fX_mem_funs : fX ‚àà A.funs ùîπ := by
        rw [mem_funs]
        and_intros
        ¬∑ intro z hz
          rw [mem_sep, mem_prod] at hz
          obtain ‚ü®‚ü®a, ha, b, hb, rfl‚ü©, _‚ü© := hz
          rw [pair_mem_prod]
          exact ‚ü®ha, hb‚ü©
        ¬∑ intro a ha
          by_cases a_mem_X : a ‚àà X
          ¬∑ use zftrue
            and_intros
            ¬∑ beta_reduce
              rw [mem_sep, pair_mem_prod]
              and_intros
              ¬∑ exact ha
              ¬∑ rw [ZFBool.mem_ùîπ_iff]
                right
                rfl
              ¬∑ rwa [œÄ‚ÇÅ_pair, œÄ‚ÇÇ_pair, iff_true_right rfl]
            ¬∑ intro b hb
              rw [mem_sep, pair_mem_prod, œÄ‚ÇÅ_pair, œÄ‚ÇÇ_pair] at hb
              rwa [‚Üêhb.2]
          ¬∑ use zffalse
            and_intros
            ¬∑ beta_reduce
              rw [mem_sep, pair_mem_prod]
              and_intros
              ¬∑ exact ha
              ¬∑ rw [ZFBool.mem_ùîπ_iff]
                left
                rfl
              ¬∑ rwa [œÄ‚ÇÅ_pair, œÄ‚ÇÇ_pair, iff_false_right zftrue_ne_zffalse.symm]
            ¬∑ intro b hb
              rw [mem_sep, pair_mem_prod, œÄ‚ÇÅ_pair, œÄ‚ÇÇ_pair, ‚Üênot_iff_not] at hb
              exact Or.resolve_right (ZFBool.mem_ùîπ_iff b |>.mp hb.1.2) (hb.2.mp a_mem_X)
      and_intros
      ¬∑ exact fX_mem_funs
      ¬∑ rw [lambda_spec]
        and_intros
        ¬∑ exact fX_mem_funs
        ¬∑ rwa [mem_powerset]
        ¬∑ ext1 z
          rw [mem_sep, mem_sep, pair_mem_prod, œÄ‚ÇÅ_pair, œÄ‚ÇÇ_pair, iff_true_right rfl]
          constructor
          ¬∑ intro hz
            exact ‚ü®hX hz, ‚ü®hX hz, ZFBool.zftrue_mem_ùîπ‚ü©, hz‚ü©
          ¬∑ rintro ‚ü®_, _, hz‚ü©
            exact hz
  ¬∑ and_intros
    ¬∑ intro z hz
      rw [mem_lambda] at hz
      obtain ‚ü®fX, X, rfl, fX_def, _, rfl‚ü© := hz
      rw [pair_mem_prod]
      and_intros <;> assumption
    ¬∑ intro fX fX_mem
      use A.sep fun z ‚Ü¶ z.pair zftrue ‚àà fX, ?_
      ¬∑ intro y hy
        unfold f at hy
        rw [lambda_spec] at hy
        exact hy.2.2
      ¬∑ beta_reduce
        rw [lambda_spec]
        and_intros
        ¬∑ exact fX_mem
        ¬∑ rw [mem_powerset]
          exact sep_subset_self
        ¬∑ rfl

theorem ZFNat.iso_eq_iff {n m : ZFNat} : ‚Üën ‚âÖ·∂ª ‚Üëm ‚Üî n = m where
  mp := by classical
    intro iso
    induction n generalizing m with
    | zero =>
      obtain ‚ü®bij, isfunc, isbij‚ü© := iso
      ext z
      simp_rw [ZFNat.nat_zero_eq, notMem_empty, false_iff]
      intro contr
      obtain ‚ü®x, contr, _‚ü© := isbij.2 z contr
      nomatch notMem_empty x contr
    | succ n ih =>
      obtain ‚ü®f, isfunc, bij‚ü© := iso

      obtain ‚ü®‚Ñì, h‚Ñì, ‚Ñì_unq‚ü© := isfunc.2 ‚Üën <| add_one_eq_succ ‚ñ∏ lt_succ
      have ‚Ñì_mem_m := isfunc.1 h‚Ñì |> pair_mem_prod.mp |>.2

      obtain ‚ü®k, rfl‚ü© : ‚àÉ k, m = k + 1 := by
        simp_rw [ZFNat.add_one_eq_succ]
        apply ZFNat.not_zero_imp_succ
        rintro rfl
        nomatch notMem_empty _ ‚Ñì_mem_m

      rw [add_right_cancel]
      apply ih

      let f' := ZFSet.prod ‚Üën (‚Üë(k+1) \ {‚Ñì}) |>.sep (¬∑ ‚àà f)
      have : IsFunc ‚Üën (‚Üë(k+1) \ {‚Ñì}) f' := by
        and_intros
        ¬∑ exact sep_subset_self
        ¬∑ intro z zn
          have : z ‚àà (‚Üë(n+1) : ZFSet) := by
            rw [add_one_eq_succ, ZFNat.succ, mem_insert_iff]
            right
            exact zn
          obtain ‚ü®y, hy, y_unq‚ü© := isfunc.2 z this
          use y
          and_intros <;> beta_reduce
          ¬∑ rw [mem_sep, pair_mem_prod]
            and_intros
            ¬∑ exact zn
            ¬∑ rw [mem_diff, mem_singleton]
              and_intros
              ¬∑ exact isfunc.1 hy |> pair_mem_prod.mp |>.2
              ¬∑ rintro ‚ü®‚ü©
                rw [bij.1 ‚Üën z ‚Ñì _ this ‚Ñì_mem_m h‚Ñì hy] at zn
                ¬∑ nomatch mem_irrefl _ zn
                ¬∑ rw [add_one_eq_succ]
                  exact lt_succ
            ¬∑ exact hy
          ¬∑ intro w hzw
            rw [mem_sep, pair_mem_prod, mem_diff, mem_singleton] at hzw
            exact y_unq w hzw.2
      have bij' : IsBijective f' this := by
        rw [bijective_exists1_iff]
        intro y hy
        rw [mem_diff, add_one_eq_succ, mem_singleton, succ, mem_insert_iff] at hy
        obtain ‚ü®rfl | y_mem_k, y_ne_‚Ñì‚ü© := hy
        ¬∑ rw [bijective_exists1_iff] at bij
          have := bij k ?_
          ¬∑ obtain ‚ü®x, ‚ü®x_mem_succ_n, x_k_f‚ü©, x_unq‚ü© := this
            use x
            rw [add_one_eq_succ, succ, mem_insert_iff] at x_mem_succ_n
            rcases x_mem_succ_n with rfl | x_mem_n
            ¬∑ nomatch y_ne_‚Ñì <| isfunc.2 _ (by
                rw [add_one_eq_succ]; exact lt_succ) |>.unique x_k_f h‚Ñì
            ¬∑ and_intros <;> beta_reduce
              ¬∑ exact x_mem_n
              ¬∑ rw [mem_sep, pair_mem_prod, mem_diff, mem_singleton]
                and_intros
                ¬∑ exact x_mem_n
                ¬∑ rw [add_one_eq_succ]
                  exact lt_succ
                ¬∑ exact y_ne_‚Ñì
                ¬∑ exact x_k_f
              ¬∑ rintro y ‚ü®yn, y_k_f‚ü©
                rw [mem_sep, pair_mem_prod, mem_diff, mem_singleton] at y_k_f
                apply bij k (by rw [add_one_eq_succ]; exact lt_succ) |>.unique
                ¬∑ and_intros
                  ¬∑ rw [add_one_eq_succ, succ, mem_insert_iff]
                    right
                    exact y_k_f.1.1
                  ¬∑ exact y_k_f.2
                ¬∑ and_intros
                  ¬∑ rw [add_one_eq_succ, succ, mem_insert_iff]
                    right
                    exact x_mem_n
                  ¬∑ exact x_k_f
          ¬∑ rw [add_one_eq_succ]
            exact lt_succ
        ¬∑ rw [bijective_exists1_iff] at bij
          have := bij y ?_
          ¬∑ obtain ‚ü®x, ‚ü®x_mem_succ_n, x_k_f‚ü©, x_unq‚ü© := this
            use x
            rw [add_one_eq_succ, succ, mem_insert_iff] at x_mem_succ_n
            rcases x_mem_succ_n with rfl | x_mem_n
            ¬∑ nomatch y_ne_‚Ñì <| isfunc.2 _ (by
                rw [add_one_eq_succ]; exact lt_succ) |>.unique x_k_f h‚Ñì
            ¬∑ and_intros <;> beta_reduce
              ¬∑ exact x_mem_n
              ¬∑ rw [mem_sep, pair_mem_prod, mem_diff, mem_singleton]
                and_intros
                ¬∑ exact x_mem_n
                ¬∑ rw [add_one_eq_succ, succ, mem_insert_iff]
                  right
                  exact y_mem_k
                ¬∑ exact y_ne_‚Ñì
                ¬∑ exact x_k_f
              ¬∑ rintro z ‚ü®zn, z_k_f‚ü©
                rw [mem_sep, pair_mem_prod, mem_diff, mem_singleton] at z_k_f
                apply bij y ?_ |>.unique
                ¬∑ and_intros
                  ¬∑ rw [add_one_eq_succ, succ, mem_insert_iff]
                    right
                    exact z_k_f.1.1
                  ¬∑ exact z_k_f.2
                ¬∑ and_intros
                  ¬∑ rw [add_one_eq_succ, succ, mem_insert_iff]
                    right
                    exact x_mem_n
                  ¬∑ exact x_k_f
                ¬∑ rw [add_one_eq_succ, succ, mem_insert_iff]
                  right
                  exact y_mem_k
          ¬∑ rw [add_one_eq_succ, succ, mem_insert_iff]
            right
            exact y_mem_k
      have k_iso : ‚Üëk ‚âÖ·∂ª (‚Üë(k+1) \ {‚Ñì}) := by
        let g := ZFSet.prod ‚Üëk (‚Üë(k+1) \ {‚Ñì}) |>.sep fun xy ‚Ü¶
          let x := xy.œÄ‚ÇÅ -- x ‚àà ‚Üëk
          let y := xy.œÄ‚ÇÇ -- y ‚àà ‚Üë(k+1) \ {‚Ñì}
          if x ‚àà ‚Ñì then x = y
          else y = (insert x x)
        use g, ?_
        ¬∑ and_intros
          ¬∑ intro x y z hz hy hz g_xz g_yz
            dsimp [g] at g_xz g_yz
            simp only [mem_sep, mem_prod, mem_diff, mem_singleton, pair_inj,
              exists_eq_right_right', œÄ‚ÇÅ_pair, œÄ‚ÇÇ_pair] at g_xz g_yz
            obtain ‚ü®‚ü®mem_x_k, mem_z_succ_k, z_ne_‚Ñì‚ü©, z_eq‚ü© := g_xz
            obtain ‚ü®‚ü®mem_y_k, -, -‚ü©, z_eq'‚ü© := g_yz

            -- reason into naturals
            have z_Nat : z ‚àà Nat := mem_Nat_of_mem_mem_Nat (k.succ.prop) (by
              rwa [add_one_eq_succ] at mem_z_succ_k)
            have x_Nat : x ‚àà Nat := mem_Nat_of_mem_mem_Nat (k.prop) mem_x_k
            have y_Nat : y ‚àà Nat := mem_Nat_of_mem_mem_Nat (k.prop) hy
            have ‚Ñì_Nat : ‚Ñì ‚àà Nat := mem_Nat_of_mem_mem_Nat (k.succ.prop) (by
              rwa [add_one_eq_succ] at ‚Ñì_mem_m)
            let Z : ZFNat := ‚ü®z, z_Nat‚ü©
            let X : ZFNat := ‚ü®x, x_Nat‚ü©
            let Y : ZFNat := ‚ü®y, y_Nat‚ü©
            let L : ZFNat := ‚ü®‚Ñì, ‚Ñì_Nat‚ü©

            split_ifs at z_eq z_eq' with x_mem_‚Ñì y_mem_‚Ñì y_lt_‚Ñì
            ¬∑ subst x y
              rfl
            ¬∑ subst x
              have Z_eq_succ_Y : Z = Y + 1 := by
                rw [add_one_eq_succ, succ, Subtype.ext_iff]
                exact z_eq'
              change Z < L at x_mem_‚Ñì
              change ¬¨ Y < L at y_mem_‚Ñì
              rw [not_lt] at y_mem_‚Ñì
              obtain L_lt_Y | L_eq_Y := y_mem_‚Ñì
              ¬∑ have := lt_trans x_mem_‚Ñì L_lt_Y
                rw [Z_eq_succ_Y] at this
                absurd this
                rw [not_lt, add_one_eq_succ]
                exact le_succ
              ¬∑ rw [L_eq_Y, Z_eq_succ_Y] at x_mem_‚Ñì
                absurd x_mem_‚Ñì
                rw [not_lt, add_one_eq_succ]
                exact le_succ
            ¬∑ subst y
              have Z_eq_succ_X : Z = X + 1 := by
                rw [add_one_eq_succ, succ, Subtype.ext_iff]
                exact z_eq
              change ¬¨ X < L at x_mem_‚Ñì
              change Z < L at y_lt_‚Ñì
              rw [not_lt] at x_mem_‚Ñì
              obtain L_lt_X | L_eq_X := x_mem_‚Ñì
              ¬∑ have := lt_trans y_lt_‚Ñì L_lt_X
                rw [Z_eq_succ_X] at this
                absurd this
                rw [not_lt, add_one_eq_succ]
                exact le_succ
              ¬∑ rw [L_eq_X, Z_eq_succ_X] at y_lt_‚Ñì
                absurd y_lt_‚Ñì
                rw [not_lt, add_one_eq_succ]
                exact le_succ
            ¬∑ apply succ_inj_aux'
              rw [‚Üêz_eq, ‚Üêz_eq']
          ¬∑ intro y hy

            -- reason into naturals
            have y_Nat : y ‚àà Nat := by
              apply mem_Nat_of_mem_mem_Nat (k.succ.prop)
              rw [add_one_eq_succ, mem_diff] at hy
              exact hy.1
            have ‚Ñì_Nat : ‚Ñì ‚àà Nat := mem_Nat_of_mem_mem_Nat (k.succ.prop) (by
              rwa [add_one_eq_succ] at ‚Ñì_mem_m)
            let Y : ZFNat := ‚ü®y, y_Nat‚ü©
            let L : ZFNat := ‚ü®‚Ñì, ‚Ñì_Nat‚ü©

            simp only [add_one_eq_succ, succ, mem_insert_iff, mem_diff, mem_singleton] at hy
            obtain ‚ü®rfl | y_mem_k, y_ne_‚Ñì‚ü© := hy
            ¬∑ have ‚Ñì_Nat : ‚Ñì ‚àà Nat := mem_Nat_of_mem_mem_Nat (k.succ.prop) (by
                rwa [add_one_eq_succ] at ‚Ñì_mem_m)
              let L : ZFNat := ‚ü®‚Ñì, ‚Ñì_Nat‚ü©
              change L < k + 1 at ‚Ñì_mem_m
              rw [add_one_eq_succ, ‚Üêlt_le_iff] at ‚Ñì_mem_m
              rcases ‚Ñì_mem_m with L_lt_k | L_eq_k
              ¬∑ have := ZFNat.not_zero_imp_succ (n := k) ?_
                ¬∑ obtain ‚ü®s, rfl‚ü© := this
                  use s, lt_succ
                  unfold g
                  simp only [mem_sep, pair_mem_prod, mem_diff, mem_singleton, œÄ‚ÇÅ_pair, œÄ‚ÇÇ_pair]
                  and_intros
                  ¬∑ exact lt_succ
                  ¬∑ rw [add_one_eq_succ]
                    exact lt_succ
                  ¬∑ rintro rfl
                    contradiction
                  ¬∑ rw [‚Üêlt_le_iff] at L_lt_k
                    conv =>
                        enter [1]
                        change s < L
                    rcases L_lt_k with L_lt_s | rfl
                    ¬∑ rw [
                        ite_cond_eq_false (h := eq_false (nomatch lt_irrefl <| lt_trans ¬∑ L_lt_s))]
                      rfl
                    ¬∑ rw [ite_cond_eq_false (h := eq_false lt_irrefl)]
                      rfl
                ¬∑ rintro rfl
                  nomatch not_lt_zero L_lt_k
              ¬∑ nomatch (Subtype.coe_ne_coe.mp y_ne_‚Ñì) L_eq_k.symm
            ¬∑ by_cases y_lt_‚Ñì : y ‚àà ‚Ñì
              ¬∑ change Y < L at y_lt_‚Ñì
                use y, y_mem_k
                dsimp [g]
                simp only [mem_sep, mem_prod, mem_diff, mem_singleton, pair_inj,
                  exists_eq_right_right', œÄ‚ÇÅ_pair, œÄ‚ÇÇ_pair]
                split_ifs
                ¬∑ and_intros
                  ¬∑ exact y_mem_k
                  ¬∑ change Y < k + 1
                    trans L
                    ¬∑ exact y_lt_‚Ñì
                    ¬∑ exact ‚Ñì_mem_m
                  ¬∑ exact y_ne_‚Ñì
                  ¬∑ trivial
                ¬∑ contradiction
              ¬∑ change ¬¨ Y < L at y_lt_‚Ñì
                change Y < k at y_mem_k
                rw [not_lt] at y_lt_‚Ñì
                rw [‚Üêne_eq, ne_comm, ne_eq] at y_ne_‚Ñì

                have := ZFNat.not_zero_imp_succ (n := Y) ?_
                ¬∑ obtain ‚ü®s, Y_eq‚ü© := this
                  use s
                  and_intros
                  ¬∑ change s < k
                    rw [Y_eq] at y_mem_k
                    trans s.succ
                    ¬∑ exact lt_succ
                    ¬∑ exact y_mem_k
                  ¬∑ rw [Y_eq] at y_mem_k y_lt_‚Ñì
                    unfold Y at Y_eq
                    rw [succ, Subtype.ext_iff] at Y_eq
                    dsimp at Y_eq
                    subst y
                    replace y_ne_‚Ñì : ¬¨ L = s.succ := by
                      intro eq
                      unfold L at eq
                      rw [succ, Subtype.ext_iff] at eq
                      dsimp at eq
                      subst ‚Ñì
                      nomatch y_ne_‚Ñì
                    rcases y_lt_‚Ñì with L_lt_s | L_eq_s
                    ¬∑ rw [‚Üê lt_le_iff] at L_lt_s
                      rcases L_lt_s with L_lt_s | L_eq_s
                      ¬∑ dsimp [g]
                        rw [mem_sep, pair_mem_prod, œÄ‚ÇÅ_pair, œÄ‚ÇÇ_pair]
                        and_intros
                        ¬∑ change s < k
                          exact lt_of_succ_lt y_mem_k
                        ¬∑ rw [mem_diff, mem_singleton]
                          and_intros
                          ¬∑ change s.succ < k + 1
                            rw [add_one_eq_succ, ‚Üêsucc_mono]
                            exact lt_of_succ_lt y_mem_k
                          ¬∑ intro contr
                            replace contr : L = s.succ := by
                              rw [succ, Subtype.ext_iff]
                              exact contr.symm
                            contradiction
                        ¬∑ conv =>
                            enter [1]
                            change s < L
                          rw [ite_cond_eq_false
                            (h := eq_false (nomatch lt_irrefl <| lt_trans ¬∑ L_lt_s))]
                      ¬∑ subst s
                        dsimp [g]
                        rw [mem_sep, pair_mem_prod, œÄ‚ÇÅ_pair, œÄ‚ÇÇ_pair]
                        and_intros
                        ¬∑ change L < k
                          exact lt_of_succ_lt y_mem_k
                        ¬∑ rw [mem_diff, mem_singleton]
                          and_intros
                          ¬∑ change L.succ < k + 1
                            rw [add_one_eq_succ, ‚Üêsucc_mono]
                            exact lt_of_succ_lt y_mem_k
                          ¬∑ intro contr
                            replace contr : L = L.succ := by
                              rw [succ, Subtype.ext_iff]
                              exact contr.symm
                            contradiction
                        ¬∑ conv =>
                            enter [1]
                            change L < L
                          rw [ite_cond_eq_false (h := eq_false lt_irrefl)]
                    ¬∑ contradiction
                ¬∑ intro eq_zero
                  have := Or.resolve_right y_lt_‚Ñì (Subtype.coe_ne_coe.mp y_ne_‚Ñì)
                  rw [eq_zero] at this
                  nomatch ZFNat.not_lt_zero this
        ¬∑ dsimp [g]
          and_intros
          ¬∑ exact sep_subset_self
          ¬∑ intro x x_mem_k
            simp only [mem_sep, mem_prod, mem_diff, mem_singleton, pair_inj,
              exists_eq_right_right', œÄ‚ÇÅ_pair, œÄ‚ÇÇ_pair]
            split_ifs with x_mem_‚Ñì
            ¬∑ use x
              and_intros <;> beta_reduce
              ¬∑ exact x_mem_k
              ¬∑ rw [add_one_eq_succ, succ, mem_insert_iff]
                right
                exact x_mem_k
              ¬∑ rintro rfl
                nomatch mem_irrefl _ x_mem_‚Ñì
              ¬∑ rfl
              ¬∑ rintro _ ‚ü®_, rfl‚ü©
                rfl
            ¬∑ use (insert x x)
              and_intros <;> beta_reduce
              ¬∑ exact x_mem_k
              ¬∑ rw [add_one_eq_succ, succ, mem_insert_iff]
                have hx : x ‚àà Nat := mem_Nat_of_mem_mem_Nat k.prop x_mem_k
                suffices (‚ü®x, hx‚ü© + 1 : ZFNat) = k ‚à® (‚ü®x, hx‚ü© + 1 : ZFNat) < k by
                  rcases this with rfl | h
                  ¬∑ left
                    rw [add_one_eq_succ, succ]
                  ¬∑ right
                    rw [add_one_eq_succ, succ] at h
                    exact h
                symm
                change (‚ü®x, hx‚ü© + 1 : ZFNat) ‚â§ k
                change ‚ü®x, hx‚ü© < k at x_mem_k
                rw [lt_le_iff, ‚Üêadd_one_eq_succ, add_comm, add_comm k, add_lt_add_iff_left]
                exact x_mem_k
              ¬∑ rintro rfl
                rw [mem_insert_iff, not_or] at x_mem_‚Ñì
                nomatch x_mem_‚Ñì.1 rfl
              ¬∑ rfl
              ¬∑ rintro _ ‚ü®_, rfl‚ü©
                rfl
      trans ‚Üë(k+1) \ {‚Ñì}
      ¬∑ use f', this
      ¬∑ apply ZFSet.isIso_symm
        exact k_iso
  mpr := by
    rintro rfl
    apply isIso_refl

end Lemmas

end Isomorphisms

end ZFSet
